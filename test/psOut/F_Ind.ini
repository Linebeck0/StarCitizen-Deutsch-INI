F_Ind_FullyCharged,P=Vollständig aufgeladen
F_Ind_HackingFluff,P=namespace Hacking\n{\n                //////////////////////////////////////////////////////////////////////////\n                bool CHackingAbilityLineShift::CanActivate()\n                {\n                                const CHackingGameboard& gameboard = m_hackingSession.GetGameboard();\n                                if (m_owner.GetSpareNodeId() == INVALID_NODE_ID || gameboard.IsNodeRotating(m_owner.GetSpareNodeId()) || !gameboard.CanShiftLine(m_targetLine, m_shiftDir, m_params.chargeUpTime))\n                                {\n                                                return false;\n                                }\n \n                                return CHackingAbilityBase::CanActivate();\n                }\n \n                //////////////////////////////////////////////////////////////////////////\n                bool CHackingAbilityLineShift::TryActivate()\n                {\n                                const float shiftRate = m_params.duration > 0.0f ? (1.0f / m_params.duration) : 0.0f;\n                                if (CanActivate() && m_hackingSession.GetGameboard().StartLineShift(m_owner.GetId(), m_shiftDir, m_targetLine, m_owner.GetSpareNodeId(), m_params.chargeUpTime, shiftRate))\n                                {\n                                                Activate();\n                                                return true;\n                                }\n \n                                return false;\n                }\n \n                //////////////////////////////////////////////////////////////////////////\n                void CHackingAbilityLineShift::HandleEvent(const SHackingEvtBase& evt)\n                {\n                                switch (evt.type)\n                                {\n                                                case EHackingEvtType::PC_InsertedNodeRotationRequested:\n                                                {\n                                                                CHackingGameboard& gameboard = m_hackingSession.GetGameboard();\n                                                                const SHackingEvt_PlayerControlInsertedNodeRotationRequested controlEvt = static_cast<const SHackingEvt_PlayerControlInsertedNodeRotationRequested&>(evt);\n                                                                if (m_owner.GetSpareNodeId() != INVALID_NODE_ID && controlEvt.agentId == m_owner.GetId() && !gameboard.IsNodeRotating(m_owner.GetSpareNodeId()) && \n                                                                                                m_currentState != EHackingAbilityState::Active && m_currentState != EHackingAbilityState::ChargeUp)\n                                                                {\n                                                                                gameboard.StartNodeRotation(m_owner.GetSpareNodeId(), controlEvt.bRotateClockwise, NODE_ROTATION_RATE);\n                                                                }\n \n                                                                break;\n                                                }\n \n                                                case EHackingEvtType::LineShiftStatusChanged:\n                                                {\n                                                                CHackingGameboard& gameboard = m_hackingSession.GetGameboard();\n                                                                const SHackingEvt_LineShiftStatusChanged lineShiftEvt = static_cast<const SHackingEvt_LineShiftStatusChanged&>(evt);\n                                                                if (m_owner.GetSpareNodeId() != INVALID_NODE_ID && m_owner.GetSpareNodeId() == lineShiftEvt.insertedNodeId)\n                                                                {\n                                                                                if (lineShiftEvt.IsShiftStarting() && GetAbilityState() != EHackingAbilityState::Active)\n                                                                                {\n                                                                                                SwitchToState(EHackingAbilityState::Active);\n                                                                                }\n                                                                                else if (!lineShiftEvt.IsShiftStarting())\n                                                                                {\n                                                                                                m_owner.SetSpareNodeId(lineShiftEvt.removedNodeId);\n                                                                                                if (GetAbilityState() != EHackingAbilityState::Cooldown)\n                                                                                                {\n                                                                                                                SwitchToState(EHackingAbilityState::Cooldown);\n                                                                                                }\n                                                                                }\n                                                                }\n                                                                break;\n                                                }\n                                }\n                }\n \n                //////////////////////////////////////////////////////////////////////////\n                void CHackingAbilityLineShift::SetTarget(const uint16 targetLine, const EPathPatternType shiftDir)\n                {\n                                m_targetLine = targetLine;\n                                m_shiftDir = shiftDir;\n                }\n}
F_Ind_Nominal,P=Nominal
